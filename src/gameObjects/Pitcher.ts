import * as Phaser from 'phaser';
import { Logger } from '../utils/Logger';
import { Jar } from './Jar';

export class Pitcher extends Phaser.GameObjects.Image {
  private dropZone!: Phaser.GameObjects.Zone;
  private jarCount: number = 0; // H√°ny √ºveg ker√ºlt bele
  private glowFX: any = null; // PreFX Glow effect referencia
  
  constructor(scene: Phaser.Scene, x: number, y: number) {
    super(scene, x, y, 'pitcher');
    
    this.setupPitcher();
    this.setupPreFXGlow();
    this.createDropZone();
    
    scene.add.existing(this);
  }

  private setupPitcher(): void {
    // Pitcher pozicion√°l√°sa jobb als√≥ sarokba
    this.setOrigin(1, 1); // Jobb als√≥ sarok anchor point
    
    // Z-index be√°ll√≠t√°sa - pitcher h√°tt√©rben legyen
    this.setDepth(10); // Alacsony depth - h√°tt√©rben
    
    Logger.debug('Pitcher l√©trehozva poz√≠ci√≥n:', this.x, this.y);
  }

  private setupPreFXGlow(): void {
    // PreFX padding be√°ll√≠t√°sa a glow effekt sz√°m√°ra
    if (this.preFX) {
      this.preFX.setPadding(32);
    }
  }

  public showGlow(): void {
    if (this.glowFX) return; // M√°r be van kapcsolva
    
    // PreFX glow hozz√°ad√°sa
    if (this.preFX) {
      this.glowFX = this.preFX.addGlow();
      
      // KRITIKUS: Kezdeti strength 0-ra √°ll√≠t√°sa a felvillan√°s elker√ºl√©s√©re
      this.glowFX.outerStrength = 0;
      
      // Smooth fade-in anim√°ci√≥ 0-r√≥l 4-re
      this.scene.tweens.add({
        targets: this.glowFX,
        outerStrength: 4,
        duration: 300,
        ease: 'sine.out',
        onComplete: () => {
          // Folyamatos pulz√°l√°s
          this.scene.tweens.add({
            targets: this.glowFX,
            outerStrength: 2,
            duration: 800,
            yoyo: true,
            repeat: -1,
            ease: 'sine.inout'
          });
        }
      });
    }
    
    Logger.debug('Pitcher PreFX glow effect bekapcsolva');
  }

  public hideGlow(): void {
    if (!this.glowFX) return; // M√°r ki van kapcsolva
    
    // √ñsszes tween le√°ll√≠t√°sa
    this.scene.tweens.killTweensOf(this.glowFX);
    
    // Smooth fade out
    this.scene.tweens.add({
      targets: this.glowFX,
      outerStrength: 0,
      duration: 200,
      ease: 'sine.in',
      onComplete: () => {
        if (this.preFX && this.glowFX) {
          this.preFX.remove(this.glowFX);
          this.glowFX = null;
        }
      }
    });
    
    Logger.debug('Pitcher PreFX glow effect kikapcsolva');
  }

  private createDropZone(): void {
    // Drop zone l√©trehoz√°sa a pitcher k√∂r√ºl (TELJES KORS√ì BEFOGAD√ì TER√úLET)
    const dropZoneWidth = this.width * 1.2;  // Sz√©lesebb befogad√°s
    const dropZoneHeight = this.height;      // TELJES kors√≥ magass√°g
    
    // KRITIKUS: Zone k√∂z√©ppont sz√°m√≠t√°s - pitcher origin (1,1) jobb als√≥ sarok!
    const zoneCenterX = this.x - (this.width / 2); // Pitcher k√∂zep√©re
    const zoneCenterY = this.y - (this.height / 2); // Pitcher k√∂zep√©re
    
    this.dropZone = this.scene.add.zone(
      zoneCenterX, 
      zoneCenterY, 
      dropZoneWidth, 
      dropZoneHeight
    );
    
    this.dropZone.setRectangleDropZone(dropZoneWidth, dropZoneHeight);
    
    // Drop zone sikeresen l√©trehozva - clean UI
    Logger.debug(`üéØ Drop zone l√©trehozva: center(${zoneCenterX}, ${zoneCenterY}), size(${dropZoneWidth}x${dropZoneHeight})`);

    // Drop zone esem√©nyek
    this.dropZone.on('drop', (pointer: Phaser.Input.Pointer, gameObject: Jar) => {
      this.handleJarDrop(gameObject);
    });
  }

  public handleJarDrop(jar: Jar): void {
    // Ellen≈ërizz√ºk, hogy val√≥ban Jar objektum-e √©s drag-elhet≈ë-e
    if (!jar || typeof jar.getIsDragEnabled !== 'function' || !jar.getIsDragEnabled()) {
      Logger.debug('Pitcher: Helytelen objektum vagy nem drag-elhet≈ë jar');
      return;
    }

    // Ellen≈ërizz√ºk, hogy tele van-e √©s z√°rt-e
    if (!jar.getIsFull() || jar.getIsOpen()) {
      Logger.debug('Pitcher: Jar nem tele vagy nyitott - visszahelyez√©s');
      this.returnJarToOriginalPosition(jar);
      return;
    }

    // Sikeres drop - jar elfogad√°sa
    this.acceptJar(jar);
  }

  private acceptJar(jar: Jar): void {
    this.jarCount++;
    
    // Jar "es√©s" anim√°ci√≥ja a pitcher-be
    this.scene.tweens.add({
      targets: jar,
      y: jar.y + 100,        // Lefel√© es√©s
      scale: 0.7,           // Kicsiny√≠t√©s (t√°volod√°s hat√°s)
      alpha: 0,             // Elt≈±n√©s
      rotation: jar.rotation + 0.5, // Kis forgat√°s es√©s k√∂zben
      duration: 600,
      ease: 'Power2.easeIn', // Gyorsul√≥ es√©s
      onComplete: () => {
        jar.destroy();
      }
    });

    Logger.debug(`Pitcher: Jar ${jar.getJarIndex()} elfogadva! √ñsszesen: ${this.jarCount}`);
    
    // Event k√ºld√©se a GameScene-nek
    this.scene.events.emit('jar-delivered-to-pitcher', {
      jarIndex: jar.getJarIndex(),
      totalJarsInPitcher: this.jarCount
    });

    // Ellen≈ërizz√ºk, hogy mind az 5 √ºveg benne van-e
    if (this.jarCount >= 5) {
      this.scene.events.emit('all-jars-delivered');
    Logger.info('Pitcher: Mind az 5 √ºveg leadva - j√°t√©k befejezve!');
    }
  }

  private returnJarToOriginalPosition(jar: Jar): void {
    // Jar visszahelyez√©se az eredeti poz√≠ci√≥j√°ba (JarManager konstansok alapj√°n)
    const originalX = 80 + (jar.getJarIndex() * (60 + 50)); // startX + index * (jarWidth + spacing)
    const originalY = 100;

    this.scene.tweens.add({
      targets: jar,
      x: originalX,
      y: originalY,
      duration: 300,
      ease: 'Power2.easeOut'
    });

    Logger.debug(`Pitcher: Jar ${jar.getJarIndex()} visszahelyezve eredeti poz√≠ci√≥ba`);
  }

  /**
   * Pitcher inform√°ci√≥k
   */
  public getJarCount(): number {
    return this.jarCount;
  }

  public getDropZoneBounds(): Phaser.Geom.Rectangle {
    return this.dropZone.getBounds();
  }

  /**
   * Pitcher reset (√∫j j√°t√©khoz)
   */
  public reset(): void {
    this.jarCount = 0;
    
    // JAV√çT√ÅS: Sk√°l√°z√°s √©s l√°that√≥s√°g vissza√°ll√≠t√°sa
    this.setScale(1); // Eredeti sk√°la
    this.setVisible(false); // Kezdetben l√°thatatlan (mint az inicializ√°l√°skor)
    
    // Drop zone tiszt√≠t√°sa √©s √∫jral√©trehoz√°sa eredeti m√©retekkel
    if (this.dropZone) {
      this.dropZone.destroy();
      this.createDropZone();
    }
    
    Logger.debug('Pitcher: Reset complete - sk√°l√°z√°s √©s l√°that√≥s√°g vissza√°ll√≠tva');
  }

  /**
   * Drop zone poz√≠ci√≥ friss√≠t√©se (ha a pitcher mozog)
   */
  public updateDropZonePosition(x: number, y: number): void {
    this.setPosition(x, y);
    this.dropZone.setPosition(x - this.width / 2, y - this.height / 2);
    
    // PreFX automatikusan k√∂veti a sprite poz√≠ci√≥t
  }

  /**
   * Sk√°l√°z√°s √©s poz√≠ci√≥ friss√≠t√©se egyszerre
   * VAL√ìS AR√ÅNYOS√çT√ÅS: Fullscreen (1.0) vagy val√≥s canvas ar√°ny
   */
  public updateScaleAndPosition(gameScale: number, gameWidth: number, gameHeight: number): void {
    console.log(`üéØ Pitcher updateScaleAndPosition: ${gameWidth}x${gameHeight}, gameScale=${gameScale}`);
    
    // JAV√çT√ÅS: T√©nyleges ablak m√©ret haszn√°lata a canvas m√©ret helyett
    const actualWindowWidth = window.innerWidth;
    const actualWindowHeight = window.innerHeight;
    console.log(`ü™ü T√©nyleges ablak m√©ret: ${actualWindowWidth}x${actualWindowHeight}`);
    
    // Canvas sk√°l√°z√°s sz√°m√≠t√°sa
    const baseWidth = 1920;
    const baseHeight = 1080;
    const canvasScale = Math.min(gameWidth / baseWidth, gameHeight / baseHeight);
    
    // M√©ret sk√°l√°z√°s: teljes = zoom kompenz√°ci√≥, ablakos = canvas sk√°l√°z√°s
    const currentZoom = window.devicePixelRatio || 1;
    const zoomCompensation = 1 / currentZoom;
    
    // Ablakos m√≥d √©szlel√©se: gameScale alapj√°n (megb√≠zhat√≥bb mint ablak m√©ret)
    const isWindowedMode = gameScale < 0.9; // Ha gameScale < 0.9, akkor ablakos m√≥d
    console.log(`üñ•Ô∏è Ablak m√≥d: ${isWindowedMode ? 'ABLAKOS' : 'TELJESK√âPERNY≈êS'} (gameScale: ${gameScale}, ablak: ${actualWindowWidth}px)`);
    
    // EREDETI pozicion√°l√°s: jobb als√≥ sarok (V√âDETT - ne v√°ltoztassuk)
    const newX = gameWidth;   // CANVAS sz√©less√©g (nem browser ablak!)
    const newY = gameHeight;  // CANVAS magass√°g (nem browser ablak!)
    
    // A final scale SAJT LOGIKA alapj√°n: egyszer≈± canvas ar√°nyos√≠t√°s
    const canvasWidth = this.scene.sys.game.canvas.width;
    const canvasHeight = this.scene.sys.game.canvas.height;
    
    const finalScale = isWindowedMode ? 
        Math.min(canvasWidth / baseWidth, canvasHeight / baseHeight) :  // Ablakos: canvas ar√°nyos√≠t√°s (mint a sajt)
        zoomCompensation;                                               // Teljes: zoom kompenz√°ci√≥
    console.log(`‚öñÔ∏è Final scale (sajt logika): ${finalScale} (canvas: ${canvasWidth}x${canvasHeight})`);
    
    // Poz√≠ci√≥ √©s m√©ret friss√≠t√©se (V√âDETT)
    this.setPosition(newX, newY);
    this.setScale(finalScale);
    // JAV√çT√ÅS: Ne tegy√ºk automatikusan l√°that√≥v√° - majd a GameScene teszi l√°that√≥v√° a megfelel≈ë id≈ëben
    // this.setVisible(true); // T√ñR√ñLVE - a spawnInteractiveElements() h√≠vja majd
    
    console.log(`üç∫ Pitcher poz√≠ci√≥: (${newX}, ${newY}), sk√°la: ${finalScale}, m√©ret: ${this.width}x${this.height}`);
    console.log(`üç∫ Pitcher bounds: left=${newX - this.width}, right=${newX}, top=${newY - this.height}, bottom=${newY}`);
    console.log(`üç∫ Pitcher l√°that√≥: ${this.visible}, alpha: ${this.alpha}`);
    
    // DropZone √öJRAL√âTREHOZ√ÅSA - a Phaser Zone setSize() nem m≈±k√∂dik megfelel≈ëen
    if (this.dropZone) {
      this.dropZone.destroy();
    }
    
    // √öj drop zone l√©trehoz√°sa a helyes m√©retekkel
    const originalDropZoneWidth = this.width * 1.2;  // Eredeti zone sz√©less√©g
    const originalDropZoneHeight = this.height;      // Eredeti zone magass√°g
    
    // Zone m√©ret sk√°l√°z√°sa a finalScale-lel
    const scaledZoneWidth = originalDropZoneWidth * finalScale;
    const scaledZoneHeight = originalDropZoneHeight * finalScale;
    
    console.log(`üì¶ Zone m√©ret: ${scaledZoneWidth}x${scaledZoneHeight} (finalScale: ${finalScale})`);
    
    // Zone poz√≠ci√≥ sz√°m√≠t√°s a sk√°l√°zott m√©retekkel
    const zoneCenterX = newX - (scaledZoneWidth / 2);
    const zoneCenterY = newY - (scaledZoneHeight / 2);
    
    // √öJ zone l√©trehoz√°sa
    this.dropZone = this.scene.add.zone(
      zoneCenterX, 
      zoneCenterY, 
      scaledZoneWidth, 
      scaledZoneHeight
    );
    
    this.dropZone.setRectangleDropZone(scaledZoneWidth, scaledZoneHeight);
    
    console.log(`üéØ Zone: left=${this.dropZone.x - scaledZoneWidth/2}, right=${this.dropZone.x + scaledZoneWidth/2}, top=${this.dropZone.y - scaledZoneHeight/2}, bottom=${this.dropZone.y + scaledZoneHeight/2}`);
    
    // Drop zone esem√©nyek √∫jrak√∂t√©se
    this.dropZone.on('drop', (pointer: Phaser.Input.Pointer, gameObject: any) => {
      this.handleJarDrop(gameObject);
    });
    
    // PreFX automatikusan k√∂veti a sprite poz√≠ci√≥t √©s sk√°l√°z√°st
  }
}