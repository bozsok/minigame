import * as Phaser from 'phaser';
import { BeanManager } from '../systems/BeanManager';
import { JarManager } from '../systems/JarManager';
import { CheeseManager } from '../systems/CheeseManager';
import { Pitcher } from '../gameObjects/Pitcher';
import { GameBalance } from '../config/GameBalance';
import { FullscreenButton } from '../gameObjects/FullscreenButton';

export default class GameScene extends Phaser.Scene {
  private beanManager!: BeanManager;
  private jarManager!: JarManager;
  private cheeseManager!: CheeseManager;
  private pitcher!: Pitcher;
  private fullscreenButton!: FullscreenButton;
  private background!: Phaser.GameObjects.Image;
  private gameStartTime: number = 0;
  private energyRemaining: number = GameBalance.energy.initialTime;
  private uiElements: {
    energyText?: Phaser.GameObjects.Text;
    beanCountText?: Phaser.GameObjects.Text;
    jarPhaseText?: Phaser.GameObjects.Text;
    instructionText?: Phaser.GameObjects.Text;
  } = {};

  constructor() {
    super('GameScene');
  }

  create(): void {
    this.gameStartTime = Date.now();
    this.energyRemaining = GameBalance.energy.initialTime;

    // Custom default cursor be√°ll√≠t√°sa glob√°lisan
    this.setGlobalDefaultCursor();
    
    // Glob√°lis eg√©rgomb esem√©nyek be√°ll√≠t√°sa cursor anim√°ci√≥hoz
    this.setupGlobalMouseEvents();

    // H√°tt√©r hozz√°ad√°sa - dinamikus m√©retez√©s
    this.background = this.add.image(0, 0, 'pantry-bg');
    this.updateBackgroundSize(this.background);

    // Scale manager esem√©nyeinek figyel√©se
    this.scale.on('resize', (gameSize: any, baseSize: any, displaySize: any, resolution: any) => {
      console.log('Phaser scale resize:', gameSize);
      this.handleResize();
    });

    // BeanManager inicializ√°l√°sa
    this.beanManager = new BeanManager(this);

    // JarManager inicializ√°l√°sa (5 √ºveg bal fels≈ë sarokban) - kezdetben l√°thatatlan
    this.jarManager = new JarManager(this);
    this.jarManager.setVisible(false); // Kezdetben l√°thatatlan

    // CheeseManager inicializ√°l√°sa (5 sajt k√ºl√∂nb√∂z≈ë poz√≠ci√≥kban) - kezdetben l√°thatatlan
    this.cheeseManager = new CheeseManager(this);

    // Pitcher l√©trehoz√°sa (jobb als√≥ sarok) - kezdetben l√°thatatlan
    // Inicializ√°l√°skor alap√©rtelmezett poz√≠ci√≥, k√©s≈ëbb friss√≠tj√ºk
    this.pitcher = new Pitcher(this, 740, 364); // 860-120, 484-120
    this.pitcher.setVisible(false); // Kezdetben l√°thatatlan

    // Elemek sk√°l√°z√°s√°nak inicializ√°l√°sa
    this.updateGameElementsScale(this.scale.gameSize.width, this.scale.gameSize.height);

    // Teljesk√©perny≈ës gomb l√©trehoz√°sa (jobb fels≈ë sarok)
    this.fullscreenButton = new FullscreenButton(this, 860 - 40, 40);

    // UI elemek l√©trehoz√°sa
    this.createUI();

    // Esem√©ny figyel≈ëk be√°ll√≠t√°sa
    this.setupEventListeners();

    // J√°t√©k ind√≠t√°sa
    this.startGame();

    console.log('GameScene l√©trehozva - Bab gy≈±jt√©s j√°t√©k elindult!');
  }

  /**
   * UI elemek l√©trehoz√°sa
   */
  private createUI(): void {
    // Bab sz√°ml√°l√≥ (jobb fels≈ë sarok)
    this.uiElements.beanCountText = this.add.text(860 - 20, 20, 'Babok: 0', {
      fontSize: '18px',
      color: '#ffffff',
      backgroundColor: '#000000',
      padding: { x: 8, y: 4 }
    }).setOrigin(1, 0);

    // Akt√≠v √ºveg √°llapot (k√∂z√©pen fel√ºl)
    this.uiElements.jarPhaseText = this.add.text(430, 20, 'Akt√≠v √ºveg: 1 (0/50 bab)', {
      fontSize: '16px',
      color: '#ffffff',
      backgroundColor: '#4CAF50',
      padding: { x: 8, y: 4 }
    }).setOrigin(0.5, 0);

    // Egyszer≈±s√≠tett UI - √ºvegek vizu√°lisan l√°that√≥k a bal fels≈ë sarokban
  }

  /**
   * Esem√©ny figyel≈ëk be√°ll√≠t√°sa
   */
  private setupEventListeners(): void {
    // Context menu letilt√°sa (jobb eg√©rgomb funkci√≥khoz)
    this.input.mouse?.disableContextMenu();
    
    // Bab sz√°ml√°l√≥ friss√≠t√©se (BeanManager-t≈ël)
    this.events.on('bean-count-updated', (data: any) => {
      this.updateBeanCountUI(data);
    });

    // Jar UI friss√≠t√©s (JarManager-t≈ël)
    this.events.on('jar-ui-update', (data: any) => {
      this.updateJarUI(data);
    });

    // Jar highlight √ºzenet (villog√°s + √∫tmutat√°s)
    this.events.on('jar-highlight', (data: any) => {
      this.handleJarHighlight(data);
    });

    // Minden √ºveg megtelt
    this.events.on('all-jars-full', () => {
      this.handleAllJarsFull();
    });

    // √úveg leadva a pitcher-be
    this.events.on('jar-delivered-to-pitcher', (data: any) => {
      this.handleJarDelivered(data);
    });

    // Minden √ºveg leadva - j√°t√©k befejezve
    this.events.on('all-jars-delivered', () => {
      this.handleGameComplete();
    });

    // M√©retv√°lt√°s kezel√©se
    this.events.on('resize', (data: any) => {
      this.resize(data);
    });
  }

  /**
   * J√°t√©k ind√≠t√°sa
   */
  private startGame(): void {
    console.log('=== J√ÅT√âK IND√çT√ÅSA ===');
    console.log('1 m√°sodperces v√°rakoz√°s a babok √©s interakt√≠v elemek megjelen√©se el≈ëtt...');
    
    // 1 m√°sodperc v√°rakoz√°s majd minden egyszerre megjelenik
    setTimeout(() => {
      console.log('250 bab spawn-ja indul...');
      this.beanManager.spawnAllBeans();
      
      // Interakt√≠v elemek megjelen√≠t√©se (√ºvegek, kors√≥, sajtok)
      console.log('Interakt√≠v elemek megjelen√≠t√©se...');
      this.jarManager.setVisible(true);
      this.pitcher.setVisible(true);
      
      // Sajtok spawn-ja (5 sajt k√ºl√∂nb√∂z≈ë poz√≠ci√≥kban)
      console.log('5 sajt spawn-ja...');
      this.cheeseManager.spawnCheeses();
      
      // Energia cs√∂kkent√©s ind√≠t√°sa
      this.startEnergyCountdown();
      
    }, 1000); // 2000-r≈ël 1000-re cs√∂kkentve
  }

  /**
   * Energia sz√°ml√°l√≥ ind√≠t√°sa
   */
  private startEnergyCountdown(): void {
    console.log('Energia sz√°ml√°l√≥ ind√≠tva...');
    // TODO: Implement√°lni az energia cs√∂kkent√©st
  }

  /**
   * F≈ë game loop
   */
  update(time: number, delta: number): void {
    // BeanManager friss√≠t√©se
    this.beanManager.update(delta);

    // Energia kijelz≈ë friss√≠t√©se (de nincs id≈ëkorl√°t!)
    const currentTime = Date.now();
    const elapsedSeconds = Math.floor((currentTime - this.gameStartTime) / 1000);
    
    // UI friss√≠t√©se (csak inform√°ci√≥s c√©lb√≥l, nincs game over)
    this.updateEnergyUI(elapsedSeconds);
  }

  /**
   * UI friss√≠t√©sek - csak inform√°ci√≥s c√©lb√≥l, nincs id≈ëkorl√°t
   */
  private updateEnergyUI(elapsedSeconds: number): void {
    if (this.uiElements.energyText) {
      // Eltelt id≈ët mutatjuk, nem h√°tralev≈ët
      this.uiElements.energyText.setText(`Eltelt id≈ë: ${elapsedSeconds}s`);
      this.uiElements.energyText.setBackgroundColor('#4CAF50'); // mindig z√∂ld - nincs id≈ënyom√°s
    }
  }

  private updateBeanCountUI(data: any): void {
    if (this.uiElements.beanCountText) {
      this.uiElements.beanCountText.setText(`Babok: ${data.totalBeans}`);
    }
  }

  private updateJarUI(data: any): void {
    if (this.uiElements.jarPhaseText) {
      const { currentJarIndex, currentJarBeans, allJarsFull } = data;
      
      if (allJarsFull) {
        this.uiElements.jarPhaseText.setText('Minden √ºveg tele! Z√°rd be √©s vidd a pitcher-be!');
        this.uiElements.jarPhaseText.setBackgroundColor('#FF9800'); // narancss√°rga
      } else {
        this.uiElements.jarPhaseText.setText(`Akt√≠v √ºveg: ${currentJarIndex + 1} (${currentJarBeans}/50 bab)`);
        this.uiElements.jarPhaseText.setBackgroundColor('#4CAF50'); // z√∂ld
      }
    }
  }

  private handleAllJarsFull(): void {
    console.log('GameScene: Minden √ºveg megtelt!');
    // Itt le√°ll√≠thatn√°nk a bean spawn-t, de a BeanManager m√°r kezeli
    // √úzenet megjelen√≠t√©se a j√°t√©kosnak
    if (this.uiElements.jarPhaseText) {
      this.uiElements.jarPhaseText.setText('Minden √ºveg tele! Dupla klikk ‚Üí lez√°r ‚Üí pitcher-be h√∫z!');
      this.uiElements.jarPhaseText.setBackgroundColor('#FF5722'); // piros-narancss√°rga
    }
  }

  private handleJarDelivered(data: any): void {
    const { jarIndex, totalJarsInPitcher } = data;
    console.log(`GameScene: Jar ${jarIndex} leadva! √ñsszesen: ${totalJarsInPitcher}/5`);
    
    // UI friss√≠t√©se
    if (this.uiElements.jarPhaseText) {
      this.uiElements.jarPhaseText.setText(`Leadott √ºvegek: ${totalJarsInPitcher}/5`);
      this.uiElements.jarPhaseText.setBackgroundColor('#2196F3'); // k√©k
    }
  }

  private handleJarHighlight(data: any): void {
    const { jarIndex, message } = data;
    console.log(`GameScene: Jar ${jarIndex} highlight - ${message}`);
    
    // Csak console log - nincs UI √ºzenet v√°ltoztat√°s
    // A villog√°s el√©g vizu√°lis feedback
  }

  private handleGameComplete(): void {
    console.log('üéâ J√ÅT√âK BEFEJEZVE! Mind az 5 √ºveg leadva!');
    
    // Victory UI
    if (this.uiElements.jarPhaseText) {
      this.uiElements.jarPhaseText.setText('üéâ GY≈êZELEM! Mind az 5 √ºveg leadva! üéâ');
      this.uiElements.jarPhaseText.setBackgroundColor('#4CAF50'); // z√∂ld
    }

    // J√°t√©k logika le√°ll√≠t√°sa
    this.beanManager.stopGame();
    
    // TODO: Victory screen vagy restart opci√≥
  }

  private updateJarPhaseUI(data: any): void {
    if (this.uiElements.jarPhaseText) {
      this.uiElements.jarPhaseText.setText(`√úveg f√°zis: ${data.phase}/${GameBalance.jar.phasesPerJar}`);
    }

    if (this.uiElements.instructionText) {
      this.uiElements.instructionText.setText(`F√°zis befejezve! (${data.phase}/${data.totalPhases})`);
      
      // 2 m√°sodperc m√∫lva vissza√°ll az eredeti sz√∂veg
      setTimeout(() => {
        if (this.uiElements.instructionText) {
          this.uiElements.instructionText.setText('Kattints a babokra a gy≈±jt√©shez!');
        }
      }, 2000);
    }
  }

  /**
   * √úveg befejez√©s kezel√©se
   */
  private handleJarCompletion(data: any): void {
    console.log('√úveg befejezve!', data);
    
    if (this.uiElements.instructionText) {
      this.uiElements.instructionText.setText('üéâ √úveg k√©sz! √öj √ºveg kezd≈ëdik!');
      this.uiElements.instructionText.setBackgroundColor('#4CAF50');
      
      setTimeout(() => {
        if (this.uiElements.instructionText) {
          this.uiElements.instructionText.setText('Kattints a babokra a gy≈±jt√©shez!');
          this.uiElements.instructionText.setBackgroundColor('#2196F3');
        }
      }, 3000);
    }
  }

  /**
   * J√°t√©k v√©ge - csak akkor h√≠vjuk, ha minden bab √∂sszegy≈±jtve
   */
  private gameOver(): void {
    console.log('Minden bab √∂sszegy≈±jtve! Gratul√°lunk!');
    
    // Csak akkor h√≠vjuk ha t√©nyleg k√©sz a j√°t√©k (250 bab √∂sszegy≈±jtve)
    // BeanManager le√°ll√≠t√°sa
    this.beanManager.cleanup();
    
    // Vissza a men√ºbe
    this.scene.start('MenuScene');
  }

  /**
   * H√°tt√©r m√©ret√©nek friss√≠t√©se
   */
  private updateBackgroundSize(background: Phaser.GameObjects.Image): void {
    const gameWidth = this.scale.width;
    const gameHeight = this.scale.height;
    this.updateBackgroundSizeWithDimensions(background, gameWidth, gameHeight);
  }

  /**
   * H√°tt√©r m√©ret√©nek friss√≠t√©se megadott m√©retekkel
   */
  private updateBackgroundSizeWithDimensions(background: Phaser.GameObjects.Image, gameWidth: number, gameHeight: number): void {
    // Eredeti k√©p m√©ret lek√©r√©se
    const originalWidth = background.texture.source[0].width;
    const originalHeight = background.texture.source[0].height;
    
    // H√°tt√©r sk√°l√°z√°sa hogy fedje a teljes j√°t√©kter√ºletet (cover mode)
    const scaleX = gameWidth / originalWidth;
    const scaleY = gameHeight / originalHeight;
    const scale = Math.max(scaleX, scaleY);
    
    background.setScale(scale);
    background.setPosition(gameWidth / 2, gameHeight / 2);
    background.setOrigin(0.5, 0.5);
    
    // H√°tteret h√°trahelyezz√ºk hogy minden m√°s el≈ëtte legyen
    background.setDepth(-1);
  }

  /**
   * Phaser scale manager resize kezel√©se
   */
  public handleResize(newWidth?: number, newHeight?: number): void {
    const gameWidth = newWidth || this.scale.width;
    const gameHeight = newHeight || this.scale.height;
    
    // H√°tt√©r √∫jra m√©retez√©se a megadott m√©retekkel
    if (this.background) {
      this.updateBackgroundSizeWithDimensions(this.background, gameWidth, gameHeight);
    } else {
      console.log('HIBA: H√°tt√©r objektum nem tal√°lhat√≥!');
    }
    
    // UI elemek poz√≠ci√≥j√°nak friss√≠t√©se
    this.updateUIPositionsWithDimensions(gameWidth, gameHeight);
  }

  /**
   * Ablakm√©ret v√°ltoz√°s kezel√©se (custom esem√©ny)
   */
  resize(gameSize: Phaser.Structs.Size): void {
    console.log(`Custom resize: ${gameSize.width}x${gameSize.height}`);
    
    // H√°tt√©r √∫jra m√©retez√©se
    if (this.background) {
      this.updateBackgroundSize(this.background);
    }
    
    // UI elemek poz√≠ci√≥j√°nak friss√≠t√©se
    this.updateUIPositions();
    
    // BeanManager spawn pontjainak friss√≠t√©se (ha sz√ºks√©ges)
    if (this.beanManager) {
      // A BeanManager automatikusan friss√≠ti a spawn pontokat a scene m√©ret alapj√°n
    }
  }

  /**
   * UI elemek poz√≠ci√≥j√°nak friss√≠t√©se
   */
  private updateUIPositions(): void {
    const gameWidth = this.scale.width;
    const gameHeight = this.scale.height;
    this.updateUIPositionsWithDimensions(gameWidth, gameHeight);
  }

  /**
   * UI elemek poz√≠ci√≥j√°nak friss√≠t√©se megadott m√©retekkel
   */
  private updateUIPositionsWithDimensions(gameWidth: number, gameHeight: number): void {
    // Energia kijelz≈ë (bal fels≈ë sarok)
    if (this.uiElements.energyText) {
      this.uiElements.energyText.setPosition(20, 20);
    }

    // Bab sz√°ml√°l√≥ (jobb fels≈ë sarok)
    if (this.uiElements.beanCountText) {
      this.uiElements.beanCountText.setPosition(gameWidth - 20, 20);
    }

    // √úveg f√°zis kijelz≈ë (k√∂z√©pen fel√ºl)
    if (this.uiElements.jarPhaseText) {
      this.uiElements.jarPhaseText.setPosition(gameWidth / 2, 20);
    }

    // Utas√≠t√°s sz√∂veg (lent k√∂z√©pen)
    if (this.uiElements.instructionText) {
      this.uiElements.instructionText.setPosition(gameWidth / 2, gameHeight - 40);
    }

    // J√°t√©k elemek sk√°l√°z√°sa √©s poz√≠cion√°l√°sa
    this.updateGameElementsScale(gameWidth, gameHeight);

    // Teljesk√©perny≈ës gomb poz√≠ci√≥ja m√°r friss√≠tve van a FullscreenButton-ban
  }

  /**
   * J√°t√©k elemek (√ºvegek, kors√≥) sk√°l√°z√°sa √©s poz√≠cion√°l√°sa
   * VAL√ìS AR√ÅNYOS√çT√ÅS: Fullscreen = nat√≠v m√©ret, Ablakos = canvas ar√°nyos√≠t√°s
   */
  private updateGameElementsScale(gameWidth: number, gameHeight: number): void {
    // Val√≥s ar√°nyos√≠t√°s: eredeti spawn canvas vs jelenlegi canvas
    const isFullscreen = gameWidth > 1200;
    
    let gameScale: number;
    if (isFullscreen) {
      gameScale = 1.0; // Fullscreen = nat√≠v m√©ret
    } else {
      // Val√≥s ar√°nyos√≠t√°s: BeanManager-t≈ël k√©rj√ºk el az eredeti m√©retet
      const originalWidth = this.beanManager ? this.beanManager.getOriginalCanvasWidth() : gameWidth;
      const originalHeight = this.beanManager ? this.beanManager.getOriginalCanvasHeight() : gameHeight;
      
      // Ar√°nyos√≠t√°s a kisebb √©rt√©kkel (hogy minden belef√©rjen)
      const scaleX = gameWidth / originalWidth;
      const scaleY = gameHeight / originalHeight;
      gameScale = Math.min(scaleX, scaleY);
    }
    
    // JarManager sk√°l√°z√°sa √©s √∫jrapoz√≠cion√°l√°sa
    if (this.jarManager) {
      this.jarManager.updateScale(gameScale, gameWidth, gameHeight);
    }

    // Pitcher sk√°l√°z√°sa √©s √∫jrapoz√≠cion√°l√°sa
    if (this.pitcher) {
      this.pitcher.updateScaleAndPosition(gameScale, gameWidth, gameHeight);
    }

    // Babok sk√°l√°z√°sa
    if (this.beanManager) {
      this.beanManager.updateScale(gameScale, gameWidth, gameHeight);
    }

    // Sajtok sk√°l√°z√°sa √©s pozicion√°l√°sa (kiv√©ve dev mode-ban)
    if (this.cheeseManager && !this.cheeseManager.isDevMode()) {
      this.cheeseManager.updateScale(gameScale, gameWidth, gameHeight);
    }
  }

  /**
   * Scene cleanup
   */
  shutdown(): void {
    if (this.beanManager) {
      this.beanManager.cleanup();
    }
    if (this.fullscreenButton) {
      this.fullscreenButton.destroy();
    }
    
    // Glob√°lis cursor event listener-ek elt√°vol√≠t√°sa
    this.removeGlobalMouseEvents();
    
    this.events.removeAllListeners();
  }

  /**
   * Glob√°lis default cursor be√°ll√≠t√°sa - custom sprite haszn√°lat
   */
  private setGlobalDefaultCursor(): void {
    const canvas = this.game.canvas;
    if (!canvas) return;

    // cursor-default sprite els≈ë frame-j√©nek haszn√°lata
    const texture = this.textures.get('cursor-default');
    if (!texture || !texture.source[0]) {
      console.warn('cursor-default sprite nem tal√°lhat√≥, browser default marad');
      return;
    }

    const frameWidth = 55;
    const frameHeight = 55;
    const frameIndex = 0; // Els≈ë frame

    // Canvas k√©sz√≠t√©se
    const tempCanvas = document.createElement('canvas');
    const ctx = tempCanvas.getContext('2d');
    
    if (ctx) {
      // 44% kisebb m√©ret (56% scale - 30% + √∫jabb 20% cs√∂kkent√©s)
      const scaledWidth = frameWidth * 0.56;
      const scaledHeight = frameHeight * 0.56;
      
      tempCanvas.width = scaledWidth;
      tempCanvas.height = scaledHeight;
      
      // Frame poz√≠ci√≥ (horizontal layout)
      const sourceX = frameIndex * frameWidth;
      const sourceY = 0;
      
      // Sprite image
      const image = texture.source[0].image as HTMLImageElement;
      
      // Frame rajzol√°sa scale-elt m√©retben
      ctx.drawImage(
        image,
        sourceX, sourceY, frameWidth, frameHeight,
        0, 0, scaledWidth, scaledHeight
      );
      
      // Glob√°lis cursor be√°ll√≠t√°sa - hotspot k√∂z√©pen
      const hotspotX = scaledWidth / 2;
      const hotspotY = scaledHeight / 2;
      canvas.style.cursor = `url(${tempCanvas.toDataURL()}) ${hotspotX} ${hotspotY}, auto`;
      
      console.log(`üñ±Ô∏è Glob√°lis custom default cursor be√°ll√≠tva (${scaledWidth}x${scaledHeight}px, 56% m√©ret)`);
    }
  }

  /**
   * Glob√°lis eg√©rgomb esem√©nyek be√°ll√≠t√°sa cursor anim√°ci√≥hoz
   */
  private setupGlobalMouseEvents(): void {
    const canvas = this.game.canvas;
    if (!canvas) return;

    // Event listener-ek hozz√°ad√°sa (referenci√°kkal a cleanup-hoz)
    canvas.addEventListener('mousedown', this.handleMouseDown);
    canvas.addEventListener('mouseup', this.handleMouseUp);
    canvas.addEventListener('mouseleave', this.handleMouseLeave);

    console.log('üñ±Ô∏è Glob√°lis eg√©rgomb cursor anim√°ci√≥ esem√©nyek be√°ll√≠tva');
  }

  /**
   * Cursor frame v√°lt√°sa (0 = norm√°l, 1 = lenyomott)
   */
  private setCursorFrame(frameIndex: number): void {
    const canvas = this.game.canvas;
    if (!canvas) return;

    const texture = this.textures.get('cursor-default');
    if (!texture || !texture.source[0]) return;

    const frameWidth = 55;
    const frameHeight = 55;

    // Canvas k√©sz√≠t√©se
    const tempCanvas = document.createElement('canvas');
    const ctx = tempCanvas.getContext('2d');
    
    if (ctx) {
      // 44% kisebb m√©ret (56% scale)
      const scaledWidth = frameWidth * 0.56;
      const scaledHeight = frameHeight * 0.56;
      
      tempCanvas.width = scaledWidth;
      tempCanvas.height = scaledHeight;
      
      // Frame poz√≠ci√≥ (horizontal layout)
      const sourceX = frameIndex * frameWidth;
      const sourceY = 0;
      
      // Sprite image
      const image = texture.source[0].image as HTMLImageElement;
      
      // Frame rajzol√°sa scale-elt m√©retben
      ctx.drawImage(
        image,
        sourceX, sourceY, frameWidth, frameHeight,
        0, 0, scaledWidth, scaledHeight
      );
      
      // Cursor be√°ll√≠t√°sa - hotspot k√∂z√©pen
      const hotspotX = scaledWidth / 2;
      const hotspotY = scaledHeight / 2;
      canvas.style.cursor = `url(${tempCanvas.toDataURL()}) ${hotspotX} ${hotspotY}, auto`;
      
      console.log(`üñ±Ô∏è Cursor frame v√°lt√°s: ${frameIndex} (${frameIndex === 0 ? 'norm√°l' : 'lenyomott'})`);
    }
  }

  /**
   * Glob√°lis eg√©rgomb esem√©nyek elt√°vol√≠t√°sa (cleanup)
   */
  private removeGlobalMouseEvents(): void {
    const canvas = this.game.canvas;
    if (!canvas) return;

    // Event listener-ek elt√°vol√≠t√°sa
    canvas.removeEventListener('mousedown', this.handleMouseDown);
    canvas.removeEventListener('mouseup', this.handleMouseUp);
    canvas.removeEventListener('mouseleave', this.handleMouseLeave);
    
    console.log('üñ±Ô∏è Glob√°lis eg√©rgomb cursor anim√°ci√≥ esem√©nyek elt√°vol√≠tva');
  }

  // Event handler referenci√°k (arrow function-√∂k a this context meg≈ërz√©s√©re)
  private handleMouseDown = (event: MouseEvent) => {
    if (event.button === 0) this.setCursorFrame(1);
  }

  private handleMouseUp = (event: MouseEvent) => {
    if (event.button === 0) this.setCursorFrame(0);
  }

  private handleMouseLeave = () => {
    this.setCursorFrame(0);
  }
}