import * as Phaser from 'phaser';
import { BeanManager } from '../systems/BeanManager';
import { GameBalance } from '../config/GameBalance';
import { FullscreenButton } from '../gameObjects/FullscreenButton';

export default class GameScene extends Phaser.Scene {
  private beanManager!: BeanManager;
  private fullscreenButton!: FullscreenButton;
  private background!: Phaser.GameObjects.Image;
  private gameStartTime: number = 0;
  private energyRemaining: number = GameBalance.energy.initialTime;
  private uiElements: {
    energyText?: Phaser.GameObjects.Text;
    beanCountText?: Phaser.GameObjects.Text;
    jarPhaseText?: Phaser.GameObjects.Text;
    instructionText?: Phaser.GameObjects.Text;
  } = {};

  constructor() {
    super('GameScene');
  }

  create(): void {
    this.gameStartTime = Date.now();
    this.energyRemaining = GameBalance.energy.initialTime;

    // H√°tt√©r hozz√°ad√°sa - dinamikus m√©retez√©s
    this.background = this.add.image(0, 0, 'pantry-bg');
    this.updateBackgroundSize(this.background);

    // Scale manager esem√©nyeinek figyel√©se
    this.scale.on('resize', (gameSize: any, baseSize: any, displaySize: any, resolution: any) => {
      console.log('Phaser scale resize:', gameSize);
      this.handleResize();
    });

    // BeanManager inicializ√°l√°sa
    this.beanManager = new BeanManager(this);

    // Teljesk√©perny≈ës gomb l√©trehoz√°sa (jobb fels≈ë sarok)
    this.fullscreenButton = new FullscreenButton(this, 860 - 40, 40);

    // UI elemek l√©trehoz√°sa
    this.createUI();

    // Esem√©ny figyel≈ëk be√°ll√≠t√°sa
    this.setupEventListeners();

    // J√°t√©k ind√≠t√°sa
    this.startGame();

    console.log('GameScene l√©trehozva - Bab gy≈±jt√©s j√°t√©k elindult!');
  }

  /**
   * UI elemek l√©trehoz√°sa
   */
  private createUI(): void {
    // Energia kijelz≈ë (bal fels≈ë sarok)
    this.uiElements.energyText = this.add.text(20, 20, `Energia: ${this.energyRemaining}s`, {
      fontSize: '18px',
      color: '#ffffff',
      backgroundColor: '#000000',
      padding: { x: 8, y: 4 }
    });

    // Bab sz√°ml√°l√≥ (jobb fels≈ë sarok)
    this.uiElements.beanCountText = this.add.text(860 - 20, 20, 'Babok: 0', {
      fontSize: '18px',
      color: '#ffffff',
      backgroundColor: '#000000',
      padding: { x: 8, y: 4 }
    }).setOrigin(1, 0);

    // √úveg f√°zis kijelz≈ë (k√∂z√©pen fel√ºl)
    this.uiElements.jarPhaseText = this.add.text(430, 20, '√úveg f√°zis: 0/5', {
      fontSize: '16px',
      color: '#ffffff',
      backgroundColor: '#4CAF50',
      padding: { x: 8, y: 4 }
    }).setOrigin(0.5, 0);

    // Minden felesleges UI elem elt√°vol√≠tva - tiszta bab gy≈±jt≈ë j√°t√©k
  }

  /**
   * Esem√©ny figyel≈ëk be√°ll√≠t√°sa
   */
  private setupEventListeners(): void {
    // Bab sz√°ml√°l√≥ friss√≠t√©se
    this.events.on('bean-count-updated', (data: any) => {
      this.updateBeanCountUI(data);
    });

    // √úveg f√°zis befejez√©s
    this.events.on('jar-phase-completed', (data: any) => {
      this.updateJarPhaseUI(data);
    });

    // √úveg befejez√©s
    this.events.on('jar-completed', (data: any) => {
      this.handleJarCompletion(data);
    });

    // M√©retv√°lt√°s kezel√©se
    this.events.on('resize', (data: any) => {
      this.resize(data);
    });
  }

  /**
   * J√°t√©k ind√≠t√°sa
   */
  private startGame(): void {
    console.log('=== J√ÅT√âK IND√çT√ÅSA ===');
    console.log('2 m√°sodperces v√°rakoz√°s a babok spawn-ja el≈ëtt...');
    
    // 2 m√°sodperc v√°rakoz√°s majd 250 bab spawn-ja egyszerre
    setTimeout(() => {
      console.log('250 bab spawn-ja indul...');
      this.beanManager.spawnAllBeans();
      
      // Energia cs√∂kkent√©s ind√≠t√°sa
      this.startEnergyCountdown();
      
    }, 2000);
  }

  /**
   * Energia sz√°ml√°l√≥ ind√≠t√°sa
   */
  private startEnergyCountdown(): void {
    console.log('Energia sz√°ml√°l√≥ ind√≠tva...');
    // TODO: Implement√°lni az energia cs√∂kkent√©st
  }

  /**
   * F≈ë game loop
   */
  update(time: number, delta: number): void {
    // BeanManager friss√≠t√©se
    this.beanManager.update(delta);

    // Energia kijelz≈ë friss√≠t√©se (de nincs id≈ëkorl√°t!)
    const currentTime = Date.now();
    const elapsedSeconds = Math.floor((currentTime - this.gameStartTime) / 1000);
    
    // UI friss√≠t√©se (csak inform√°ci√≥s c√©lb√≥l, nincs game over)
    this.updateEnergyUI(elapsedSeconds);
  }

  /**
   * UI friss√≠t√©sek - csak inform√°ci√≥s c√©lb√≥l, nincs id≈ëkorl√°t
   */
  private updateEnergyUI(elapsedSeconds: number): void {
    if (this.uiElements.energyText) {
      // Eltelt id≈ët mutatjuk, nem h√°tralev≈ët
      this.uiElements.energyText.setText(`Eltelt id≈ë: ${elapsedSeconds}s`);
      this.uiElements.energyText.setBackgroundColor('#4CAF50'); // mindig z√∂ld - nincs id≈ënyom√°s
    }
  }

  private updateBeanCountUI(data: any): void {
    if (this.uiElements.beanCountText) {
      this.uiElements.beanCountText.setText(`Babok: ${data.totalBeans}`);
    }
  }

  private updateJarPhaseUI(data: any): void {
    if (this.uiElements.jarPhaseText) {
      this.uiElements.jarPhaseText.setText(`√úveg f√°zis: ${data.phase}/${GameBalance.jar.phasesPerJar}`);
    }

    if (this.uiElements.instructionText) {
      this.uiElements.instructionText.setText(`F√°zis befejezve! (${data.phase}/${data.totalPhases})`);
      
      // 2 m√°sodperc m√∫lva vissza√°ll az eredeti sz√∂veg
      setTimeout(() => {
        if (this.uiElements.instructionText) {
          this.uiElements.instructionText.setText('Kattints a babokra a gy≈±jt√©shez!');
        }
      }, 2000);
    }
  }

  /**
   * √úveg befejez√©s kezel√©se
   */
  private handleJarCompletion(data: any): void {
    console.log('√úveg befejezve!', data);
    
    if (this.uiElements.instructionText) {
      this.uiElements.instructionText.setText('üéâ √úveg k√©sz! √öj √ºveg kezd≈ëdik!');
      this.uiElements.instructionText.setBackgroundColor('#4CAF50');
      
      setTimeout(() => {
        if (this.uiElements.instructionText) {
          this.uiElements.instructionText.setText('Kattints a babokra a gy≈±jt√©shez!');
          this.uiElements.instructionText.setBackgroundColor('#2196F3');
        }
      }, 3000);
    }
  }

  /**
   * J√°t√©k v√©ge - csak akkor h√≠vjuk, ha minden bab √∂sszegy≈±jtve
   */
  private gameOver(): void {
    console.log('Minden bab √∂sszegy≈±jtve! Gratul√°lunk!');
    
    // Csak akkor h√≠vjuk ha t√©nyleg k√©sz a j√°t√©k (250 bab √∂sszegy≈±jtve)
    // BeanManager le√°ll√≠t√°sa
    this.beanManager.cleanup();
    
    // Vissza a men√ºbe
    this.scene.start('MenuScene');
  }

  /**
   * H√°tt√©r m√©ret√©nek friss√≠t√©se
   */
  private updateBackgroundSize(background: Phaser.GameObjects.Image): void {
    const gameWidth = this.scale.width;
    const gameHeight = this.scale.height;
    this.updateBackgroundSizeWithDimensions(background, gameWidth, gameHeight);
  }

  /**
   * H√°tt√©r m√©ret√©nek friss√≠t√©se megadott m√©retekkel
   */
  private updateBackgroundSizeWithDimensions(background: Phaser.GameObjects.Image, gameWidth: number, gameHeight: number): void {
    console.log(`H√°tt√©r friss√≠t√©s: ${gameWidth}x${gameHeight}`);
    
    // Eredeti k√©p m√©ret lek√©r√©se
    const originalWidth = background.texture.source[0].width;
    const originalHeight = background.texture.source[0].height;
    
    console.log(`Eredeti h√°tt√©r m√©ret: ${originalWidth}x${originalHeight}`);
    
    // H√°tt√©r sk√°l√°z√°sa hogy fedje a teljes j√°t√©kter√ºletet (cover mode)
    const scaleX = gameWidth / originalWidth;
    const scaleY = gameHeight / originalHeight;
    const scale = Math.max(scaleX, scaleY);
    
    console.log(`H√°tt√©r sk√°la: ${scale} (scaleX: ${scaleX}, scaleY: ${scaleY})`);
    
    background.setScale(scale);
    background.setPosition(gameWidth / 2, gameHeight / 2);
    background.setOrigin(0.5, 0.5);
    
    // H√°tteret h√°trahelyezz√ºk hogy minden m√°s el≈ëtte legyen
    background.setDepth(-1);
  }

  /**
   * Phaser scale manager resize kezel√©se
   */
  public handleResize(newWidth?: number, newHeight?: number): void {
    console.log(`=== GAMESCENE HANDLERESIZE ELINDULT ===`);
    console.log(`Param√©terek: newWidth=${newWidth}, newHeight=${newHeight}`);
    
    const gameWidth = newWidth || this.scale.width;
    const gameHeight = newHeight || this.scale.height;
    
    console.log(`Phaser resize handler: ${gameWidth}x${gameHeight} (scale: ${this.scale.width}x${this.scale.height})`);
    
    // H√°tt√©r √∫jra m√©retez√©se a megadott m√©retekkel
    if (this.background) {
      console.log('H√°tt√©r friss√≠t√©s kezd√©se...');
      this.updateBackgroundSizeWithDimensions(this.background, gameWidth, gameHeight);
      console.log('H√°tt√©r friss√≠t√©s befejezve.');
    } else {
      console.log('HIBA: H√°tt√©r objektum nem tal√°lhat√≥!');
    }
    
    // UI elemek poz√≠ci√≥j√°nak friss√≠t√©se
    this.updateUIPositionsWithDimensions(gameWidth, gameHeight);
    console.log(`=== GAMESCENE HANDLERESIZE BEFEJEZVE ===`);
  }

  /**
   * Ablakm√©ret v√°ltoz√°s kezel√©se (custom esem√©ny)
   */
  resize(gameSize: Phaser.Structs.Size): void {
    console.log(`Custom resize: ${gameSize.width}x${gameSize.height}`);
    
    // H√°tt√©r √∫jra m√©retez√©se
    if (this.background) {
      this.updateBackgroundSize(this.background);
    }
    
    // UI elemek poz√≠ci√≥j√°nak friss√≠t√©se
    this.updateUIPositions();
    
    // BeanManager spawn pontjainak friss√≠t√©se (ha sz√ºks√©ges)
    if (this.beanManager) {
      // A BeanManager automatikusan friss√≠ti a spawn pontokat a scene m√©ret alapj√°n
    }
  }

  /**
   * UI elemek poz√≠ci√≥j√°nak friss√≠t√©se
   */
  private updateUIPositions(): void {
    const gameWidth = this.scale.width;
    const gameHeight = this.scale.height;
    this.updateUIPositionsWithDimensions(gameWidth, gameHeight);
  }

  /**
   * UI elemek poz√≠ci√≥j√°nak friss√≠t√©se megadott m√©retekkel
   */
  private updateUIPositionsWithDimensions(gameWidth: number, gameHeight: number): void {
    console.log(`UI poz√≠ci√≥k friss√≠t√©se: ${gameWidth}x${gameHeight}`);

    // Energia kijelz≈ë (bal fels≈ë sarok)
    if (this.uiElements.energyText) {
      this.uiElements.energyText.setPosition(20, 20);
    }

    // Bab sz√°ml√°l√≥ (jobb fels≈ë sarok)
    if (this.uiElements.beanCountText) {
      this.uiElements.beanCountText.setPosition(gameWidth - 20, 20);
    }

    // √úveg f√°zis kijelz≈ë (k√∂z√©pen fel√ºl)
    if (this.uiElements.jarPhaseText) {
      this.uiElements.jarPhaseText.setPosition(gameWidth / 2, 20);
    }

    // Utas√≠t√°s sz√∂veg (lent k√∂z√©pen)
    if (this.uiElements.instructionText) {
      this.uiElements.instructionText.setPosition(gameWidth / 2, gameHeight - 40);
    }

    // Teljesk√©perny≈ës gomb poz√≠ci√≥ja m√°r friss√≠tve van a FullscreenButton-ban
  }

  /**
   * Scene cleanup
   */
  shutdown(): void {
    if (this.beanManager) {
      this.beanManager.cleanup();
    }
    if (this.fullscreenButton) {
      this.fullscreenButton.destroy();
    }
    this.events.removeAllListeners();
  }
}