import * as Phaser from 'phaser';
import { Jar } from '../gameObjects/Jar';
import { Logger } from '../utils/Logger';

export class JarManager {
  private scene: Phaser.Scene;
  private jars: Jar[] = [];
  private currentActiveJarIndex: number = 0; // Melyik √ºvegbe gy≈±jtj√ºk jelenleg
  private gameActive: boolean = true; // J√°t√©k interakci√≥ √°llapot
  
  // UI poz√≠ci√≥k
  private startX: number = 80;  // Bal fels≈ë sarok X koordin√°ta (t√°volabb a sz√©lt≈ël)
  private startY: number = 100; // Bal fels≈ë sarok Y koordin√°ta (lejjebb, hogy ne l√≥gjon ki)
  private jarSpacing: number = 50; // 20px jar + 30px t√°vols√°g = 50px spacing
  private jarWidth: number = 60; // Becs√ºlt √ºveg sz√©less√©g (sprite f√ºgg≈ë)

  constructor(scene: Phaser.Scene) {
    this.scene = scene;
    this.createJars();
    this.setupEventListeners();
  }

  private createJars(): void {
    // 5 √ºveg l√©trehoz√°sa egym√°s mellett
    for (let i = 0; i < 5; i++) {
      const x = this.startX + (i * (this.jarWidth + this.jarSpacing));
      const y = this.startY;
      
      const jar = new Jar(this.scene, x, y, i);
      this.jars.push(jar);
    }

    Logger.debug('JarManager: 5 √ºveg l√©trehozva');
  }

  private setupEventListeners(): void {
    // Event listener m√°r nem sz√ºks√©ges - direct method call haszn√°lunk
    // A BeanManager k√∂zvetlen√ºl h√≠vja a tryCollectBean() met√≥dust
  }

  /**
   * Bab gy≈±jt√©s megk√≠s√©rl√©se - visszaadja, hogy siker√ºlt-e
   * JAV√çTOTT VERZI√ì: B√°rmely nyitott √ºvegbe mehet a bab, nem csak az akt√≠vba
   */
  public tryCollectBean(): boolean {
    Logger.debug('=== JAR MANAGER TRY COLLECT ===');
    
    // JAV√çT√ÅS: El≈ësz√∂r keres√ºnk B√ÅRMELY nyitott, nem teli √ºveget
    let targetJar: Jar | null = null;
    
    // 1. Pr√≥b√°ljuk az akt√≠v √ºveget (ha van √©s haszn√°lhat√≥)
    const activeJar = this.getCurrentActiveJar();
    if (activeJar && activeJar.getIsOpen() && !activeJar.getIsFull()) {
      targetJar = activeJar;
      Logger.debug(`Akt√≠v √ºveg ${activeJar.getJarIndex()} haszn√°lhat√≥ - ide megy a bab`);
    }
    
    // 2. Ha az akt√≠v √ºveg nem j√≥, keres√ºnk B√ÅRMELY nyitott √ºveget
    if (!targetJar) {
      Logger.debug('Akt√≠v √ºveg nem megfelel≈ë, keres√©s b√°rmely nyitott √ºvegben...');
      for (let i = 0; i < this.jars.length; i++) {
        const jar = this.jars[i];
        if (jar.getIsOpen() && !jar.getIsFull()) {
          targetJar = jar;
          Logger.debug(`Tal√°lt nyitott √ºveg: ${i} - ide megy a bab`);
          
          // FONTOS: Akt√≠v index friss√≠t√©se az √∫j c√©l√ºvegre
          this.currentActiveJarIndex = i;
          break;
        }
      }
    }
    
    // 3. Ha nincs nyitott √ºveg, jelezz√ºk √©s utas√≠tsuk a usert
    if (!targetJar) {
      Logger.debug('JarManager: Nincs nyitott √ºveg! Villogtat√°s ind√≠t√°sa...');
      this.highlightNextAvailableJar();
      return false;
    }

    Logger.debug(`C√©l √ºveg: ${targetJar.getJarIndex()}, nyitott: ${targetJar.getIsOpen()}, tele: ${targetJar.getIsFull()}`);
    
    // 4. Bab hozz√°ad√°sa a kiv√°lasztott √ºveghez
    const success = targetJar.addBean();
    Logger.debug(`addBean() eredm√©nye: ${success}`);
    
    if (!success) {
      Logger.debug(`JarManager: V√°ratlan hiba - a c√©l√ºveg m√©gsem fogadta a babot`);
      return false; // Bab nem lett elfogyasztva
    }

    // Ha most lett tele az √ºveg, jelezz√ºk de NEM v√°ltunk automatikusan
    // (a j√°t√©kos d√∂nti el, hogy lez√°rja-e vagy sem)
    if (targetJar.getIsFull()) {
      Logger.debug(`Jar ${targetJar.getJarIndex()} most lett tele!`);
    }

    // UI friss√≠t√©s
    this.updateUI();
    return true; // Bab sikeresen elfogyasztva
  }

  private handleBeanCollection(): boolean {
    // Ez a met√≥dus m√°r nem haszn√°latos - tryCollectBean() helyettes√≠ti
    return this.tryCollectBean();
  }

  private getCurrentActiveJar(): Jar | null {
    if (this.currentActiveJarIndex >= this.jars.length) {
      return null; // Minden √ºveg tele
    }

    return this.jars[this.currentActiveJarIndex];
  }

  private switchToNextJar(): void {
    this.currentActiveJarIndex++;
    
    if (this.currentActiveJarIndex >= this.jars.length) {
      Logger.debug('JarManager: Minden √ºveg megtelt!');
      this.scene.events.emit('all-jars-full');
      return;
    }

    Logger.debug(`JarManager: √Åtv√°lt√°s k√∂vetkez≈ë √ºvegre: ${this.currentActiveJarIndex}`);
  }

  private highlightNextAvailableJar(): void {
    Logger.debug('K√∂vetkez≈ë el√©rhet≈ë √ºveg keres√©se...');
    
    // El≈ësz√∂r keres√ºnk nyitott, nem teli √ºveget
    for (let i = 0; i < this.jars.length; i++) {
      const jar = this.jars[i];
      if (jar.getIsOpen() && !jar.getIsFull()) {
        jar.startBlinking();
        Logger.debug(`JarManager: Jar ${i} villogtat√°s - m√°r nyitott √©s haszn√°lhat√≥`);
        
        this.scene.events.emit('jar-highlight', {
          jarIndex: i,
          message: `√úveg ${i + 1} k√©szen √°ll a babokra!`
        });
        return;
      }
    }
    
    // Ha nincs nyitott √ºveg, akkor az els≈ë nem teli √ºveget jelezz√ºk (nyit√°sra)
    for (let i = 0; i < this.jars.length; i++) {
      const jar = this.jars[i];
      if (!jar.getIsFull()) {
        jar.startBlinking();
        Logger.debug(`JarManager: Jar ${i} villogtat√°s - dupla klikkel nyisd ki!`);
        
        this.scene.events.emit('jar-highlight', {
          jarIndex: i,
          message: `Dupla klikk: nyisd ki az ${i + 1}. √ºveget!`
        });
        return;
      }
    }
    
    Logger.debug('JarManager: Minden √ºveg tele van!');
  }

  private updateUI(): void {
    const activeJar = this.getCurrentActiveJar();
    const totalBeans = this.getTotalBeanCount();
    
    // UI adatok k√ºld√©se a GameScene-nek
    this.scene.events.emit('jar-ui-update', {
      currentJarIndex: this.currentActiveJarIndex,
      currentJarBeans: activeJar ? activeJar.getBeanCount() : 0,
      totalBeans: totalBeans,
      allJarsFull: this.currentActiveJarIndex >= this.jars.length
    });
  }

  /**
   * √ñsszes bab sz√°m√°nak lek√©rdez√©se
   */
  public getTotalBeanCount(): number {
    return this.jars.reduce((total, jar) => total + jar.getBeanCount(), 0);
  }

  /**
   * Akt√≠v √ºveg inform√°ci√≥k
   */
  public getActiveJarInfo(): { index: number; beanCount: number; isOpen: boolean; isFull: boolean } | null {
    const activeJar = this.getCurrentActiveJar();
    
    if (!activeJar) {
      return null;
    }

    return {
      index: activeJar.getJarIndex(),
      beanCount: activeJar.getBeanCount(),
      isOpen: activeJar.getIsOpen(),
      isFull: activeJar.getIsFull()
    };
  }

  /**
   * √ñsszes √ºveg inform√°ci√≥
   */
  public getAllJarsInfo(): Array<{ index: number; beanCount: number; isOpen: boolean; isFull: boolean; isDragEnabled: boolean }> {
    return this.jars.map(jar => ({
      index: jar.getJarIndex(),
      beanCount: jar.getBeanCount(),
      isOpen: jar.getIsOpen(),
      isFull: jar.getIsFull(),
      isDragEnabled: jar.getIsDragEnabled()
    }));
  }

  /**
   * Specific jar manipulation
   */
  public openJar(jarIndex: number): boolean {
    if (jarIndex < 0 || jarIndex >= this.jars.length) {
      return false;
    }

    const jar = this.jars[jarIndex];
    if (!jar.getIsOpen() && !jar.getIsFull()) {
      // A Jar oszt√°ly automatikusan kezeli a dupla klikket
      return true;
    }

    return false;
  }

  /**
   * J√°t√©k reset
   */
  public reset(): void {
    this.jars.forEach(jar => jar.reset());
    this.currentActiveJarIndex = 0;
    Logger.debug('JarManager: Reset complete');
  }

  /**
   * √úvegek l√°that√≥s√°g√°nak be√°ll√≠t√°sa
   */
  public setVisible(visible: boolean): void {
    this.jars.forEach(jar => jar.setVisible(visible));
    Logger.debug(`JarManager: √úvegek l√°that√≥s√°ga be√°ll√≠tva: ${visible}`);
  }

  /**
   * √úvegek sk√°l√°z√°sa √©s √∫jrapoz√≠cion√°l√°sa
   * VAL√ìS AR√ÅNYOS√çT√ÅS: Fullscreen (1.0) vagy val√≥s canvas ar√°ny
   */
  public updateScale(gameScale: number, gameWidth: number, gameHeight: number): void {
    const isFullscreen = gameScale >= 1.0;
    
    this.jars.forEach((jar, index) => {
      if (isFullscreen) {
        // Fullscreen: eredeti poz√≠ci√≥k √©s nat√≠v m√©ret
        const newX = this.startX + (index * (this.jarWidth + this.jarSpacing));
        const newY = this.startY;
        jar.setScale(1.0);
        jar.setPosition(newX, newY);
      } else {
        // Ablakos: val√≥s ar√°nyos√≠t√°s alapj√°n
        const scaledStartX = this.startX * gameScale;
        const scaledStartY = this.startY * gameScale;
        const scaledSpacing = this.jarSpacing * gameScale;
        const scaledJarWidth = this.jarWidth * gameScale;
        
        const newX = scaledStartX + (index * (scaledJarWidth + scaledSpacing));
        const newY = scaledStartY;
        jar.setScale(gameScale);
        jar.setPosition(newX, newY);
      }
    });
  }

  /**
   * Debug inform√°ci√≥k
   */
  public getDebugInfo(): string {
    const activeJar = this.getCurrentActiveJar();
    const jarsStatus = this.jars.map(jar => 
      `Jar ${jar.getJarIndex()}: ${jar.getBeanCount()} bab (${jar.getIsOpen() ? 'nyitott' : 'z√°rt'}, ${jar.getIsFull() ? 'tele' : 'nem tele'})`
    ).join(' | ');

    return `Akt√≠v √ºveg: ${activeJar ? activeJar.getJarIndex() : 'nincs'} | ${jarsStatus}`;
  }

  /**
   * J√°t√©k interakci√≥ √°llapot be√°ll√≠t√°sa
   */
  public setGameActive(active: boolean): void {
    this.gameActive = active;
    
    // Minden jar-ra alkalmazzuk a tilt√°st
    this.jars.forEach(jar => {
      jar.setGameActive(active);
    });
  }

  /**
   * J√°t√©k interakci√≥ √°llapot lek√©rdez√©se
   */
  public isGameActive(): boolean {
    return this.gameActive;
  }

  /**
   * Megmaradt √ºvegek kiemel√©se piros glow-val (j√°t√©k v√©ge eset√©n)
   * Minden l√°that√≥ √ºveget kiemel - ak√°r tele, ak√°r √ºres - mert nem lettek leadva
   */
  public highlightRemainingJars(): void {
    Logger.debug(`üî¥ Megmaradt √ºvegek kiemel√©se piros glow-val`);
    
    let remainingJarsCount = 0;
    
    this.jars.forEach((jar) => {
      // Minden l√°that√≥ √ºveg (nem lett leadva a pitcher-be)
      if (jar.visible) {
        remainingJarsCount++;
        
        // Ellen≈ërizz√ºk, hogy m√°r van-e piros glow
        const hasRedGlow = jar.getData('hasRedGlow') || false;
        
        if (!hasRedGlow) {
          // Jar egy Container - a jarBody Image objektumon kell alkalmazni a preFX-et
          const jarBody = jar.getJarBody();
          
          if (jarBody && jarBody.preFX) {
            // PreFX padding m√°r be van √°ll√≠tva a Jar konstruktorban
            
            // Egys√©ges glow API - mint a babokn√°l
            const redGlowFX = jarBody.preFX.addGlow();
            
            if (redGlowFX) {
              // Piros sz√≠n≈± glow be√°ll√≠t√°sa
              redGlowFX.color = 0xff0000; // Piros sz√≠n
              redGlowFX.outerStrength = 0; // Kezdeti √©rt√©k 0
              
              // Smooth fade-in anim√°ci√≥ - ugyanannyi mint a babokn√°l
              this.scene.tweens.add({
                targets: redGlowFX,
                outerStrength: 4, // Ugyanannyi mint a babokn√°l
                duration: 500,
                ease: 'sine.out'
              });
              
              // Glow referencia t√°rol√°sa
              jar.setData('redGlowFX', redGlowFX);
              jar.setData('hasRedGlow', true);
              
              const status = jar.getIsFull() ? 'tele, de nem leadva' : '√ºres, nem t√∂lt√∂tt√ºk meg';
              Logger.debug(`Jar ${jar.getJarIndex()} piros glow hozz√°adva - ${status}`);
            }
          } else {
            Logger.warn(`Jar ${jar.getJarIndex()} jarBody preFX nem el√©rhet≈ë`);
          }
        }
      }
    });
    
    Logger.debug(`üî¥ ${remainingJarsCount} megmaradt √ºveg kiemelve piros glow-val`);
  }
}