import { Logger } from '../utils/Logger';

export class Cheese extends Phaser.GameObjects.Image {
  private cheeseType: number; // 1-5
  private currentFrame: number = 0; // 0-4 (5 frame)
  private frameWidth!: number;
  private frameHeight!: number;
  private isEaten: boolean = false;
  private isEating: boolean = false; // Prevents multiple events per right-click
  private glowFX: any = null; // Glow effect referencia
  
  // Frame m√©retek sajt t√≠pusonk√©nt
  private static readonly FRAME_SIZES = {
    1: { width: 234, height: 141 },
    2: { width: 412, height: 199 },
    3: { width: 342, height: 104 },
    4: { width: 178, height: 74 },
    5: { width: 214, height: 119 }
  };

  constructor(scene: Phaser.Scene, x: number, y: number, cheeseType: number) {
    // EGYSZER≈∞ IMAGE - Container n√©lk√ºl!
    super(scene, x, y, `cheese-${cheeseType}`);
    this.cheeseType = cheeseType;
    
    // Frame m√©ret be√°ll√≠t√°sa
    const frameSize = Cheese.FRAME_SIZES[cheeseType as keyof typeof Cheese.FRAME_SIZES];
    this.frameWidth = frameSize.width;
    this.frameHeight = frameSize.height;
    
    // EGYSZER≈∞: Origin bal fels≈ë sarok
    this.setOrigin(0, 0);
    
    // Frame be√°ll√≠t√°sa
    this.updateFrame();
    
    // PreFX padding be√°ll√≠t√°sa a glow effekt sz√°m√°ra
    if (this.preFX) {
      this.preFX.setPadding(32);
    }
    
    this.setupInteraction();
    
    // Z-index
    this.setDepth(300);
    
    scene.add.existing(this);
    
    // DEBUG
    if (cheeseType === 3) {
      Logger.debug(`üßÄ CHEESE-3 EGYSZER≈∞ IMAGE DEBUG:`);
      Logger.debug(`  Poz√≠ci√≥: (${this.x}, ${this.y})`);
      Logger.debug(`  Origin: (${this.originX}, ${this.originY})`);
      Logger.debug(`  M√©ret: ${this.frameWidth}x${this.frameHeight}`);
    }
  }



  private setupInteraction(): void {
    // PIXEL-PERFECT COLLISION - √°tl√°tsz√≥ ter√ºleteken click-through a babokhoz!
    this.setInteractive({ 
      pixelPerfect: true,
      alphaTolerance: 1 // Csak teljesen √°tl√°tszatlan pixeleken kattinthat√≥
    });

    // Right-click kezel√©se (csak pointerdown)
    this.on('pointerdown', (pointer: Phaser.Input.Pointer) => {
      // GAME ACTIVE ELLEN≈êRZ√âS - els≈ë priorit√°s
      const gameScene = this.scene as any;
      if (gameScene.cheeseManager && !gameScene.cheeseManager.isGameActive()) {
        Logger.debug(`üö´ Sajt ${this.cheeseType} ev√©s TILTVA - j√°t√©k inakt√≠v`);
        return;
      }

      if (pointer.rightButtonDown() && !this.isEating) {
        this.isEating = true;
        Logger.debug(`Right-click sajt ${this.cheeseType}-ra (frame: ${this.currentFrame}) - pixel-perfect hit!`);
        this.eatCheese();
      }
    });

    // Hover effect - Custom cursor + Glow
    this.on('pointerover', () => {
      // GAME ACTIVE ELLEN≈êRZ√âS - cursor √©s glow tilt√°sa
      const gameScene = this.scene as any;
      if (gameScene.cheeseManager && !gameScene.cheeseManager.isGameActive()) {
        return; // Nem v√°ltoztatjuk a cursort ha j√°t√©k inakt√≠v
      }

      // Csak akkor v√°ltoztassuk a cursort √©s glow-t, ha a sajt m√©g ehet≈ë
      if (!this.isCompletelyEaten()) {
        // Custom eg√©rke sz√°j cursor - eredeti m√©retben (canvas zoom neutralized)
        const canvas = this.scene.game.canvas;
        if (canvas) {
          // Aktu√°lis j√°t√©k m√©retar√°ny lek√©rdez√©se
          const gameScale = (this.scene as any).getCurrentGameScale ? (this.scene as any).getCurrentGameScale() : 1.0;
          
          const baseCursorScale = 0.6; // 60% alapm√©ret
          // Canvas zoom neutraliz√°lva van, √≠gy eredeti scaling haszn√°lhat√≥
          const finalCursorScale = baseCursorScale * gameScale;
          
          this.setScaledCursor(canvas, 'cursor-eat.png', finalCursorScale);
          console.log(`üñ±Ô∏è Cursor scale: ${(finalCursorScale * 100).toFixed(1)}% (zoom neutralized canvas)`);
        }
        
        // Glow effekt hozz√°ad√°sa
        if (this.preFX && !this.glowFX) {
          this.glowFX = this.preFX.addGlow();
          
          // KRITIKUS: Kezdeti strength 0-ra √°ll√≠t√°sa a felvillan√°s elker√ºl√©s√©re
          this.glowFX.outerStrength = 0;
          
          // Smooth fade-in anim√°ci√≥ 0-r√≥l 3-ra
          this.scene.tweens.add({
            targets: this.glowFX,
            outerStrength: 3,
            duration: 300,
            ease: 'sine.out'
          });
        }
        
        Logger.debug(`üñ±Ô∏è‚ú® Custom cursor + Glow bekapcsolva sajt ${this.cheeseType}-n√°l (frame: ${this.currentFrame})`);
      } else {
        Logger.debug(`üñ±Ô∏è Sajt ${this.cheeseType} m√°r teljesen elfogyott - nincs hover effekt`);
      }
    });

    this.on('pointerout', () => {
      // Cursor vissza√°ll√≠t√°s default-ra
      const canvas = this.scene.game.canvas;
      if (canvas) {
        canvas.style.cursor = 'default';
      }

      // Glow effekt elt√°vol√≠t√°sa smooth anim√°ci√≥val
      if (this.glowFX) {
        this.scene.tweens.add({
          targets: this.glowFX,
          outerStrength: 0,
          duration: 200,
          ease: 'sine.in',
          onComplete: () => {
            if (this.preFX && this.glowFX) {
              this.preFX.remove(this.glowFX);
              this.glowFX = null;
            }
          }
        });
      }

      Logger.debug(`üñ±Ô∏è‚ú® Custom cursor + Glow kikapcsolva`);
    });

    // Pointer up kezel√©se - isEating flag reset
    this.on('pointerup', () => {
      this.isEating = false;
    });
  }

  private eatCheese(): void {
    if (this.isEaten) return;
    
    // Ha m√©g nem az utols√≥ frame (4. frame), akkor tov√°bbl√©p√©s
    if (this.currentFrame < 4) {
      this.currentFrame++;
      this.updateFrame();
      
      Logger.debug(`Sajt ${this.cheeseType} ev√©s: ${this.currentFrame}/4 frame`);
      
      // Esem√©ny k√ºld√©se a GameScene-nek az energia bonus hozz√°ad√°s√°hoz
      // Mind a 4 kattint√°s ad bonust (frame 1-4): 4√ó30px = 120px = teljes energia cs√≠k
      if (this.currentFrame <= 4) {
        Logger.info(`üßÄ SAJT EV√âS EVENT: ${this.cheeseType} sajt, ${this.currentFrame}/4 frame - ENERGIA BONUS K√úLD√âS!`);
        this.scene.events.emit('cheese-eaten', {
          cheeseId: `cheese-${this.cheeseType}-${this.x}-${this.y}`,
          cheeseType: this.cheeseType.toString(),
          currentFrame: this.currentFrame,
          energyBonus: 30 // 30px bonus a GameBalance alapj√°n
        });
      } else {
        Logger.debug(`üßÄ Sajt ${this.cheeseType} m√°r teljesen elfogyott (${this.currentFrame}) - nincs tov√°bbi bonus`);
      }
      
      // Ha el√©rt√ºk az utols√≥ frame-et (5. f√°zis)
      if (this.currentFrame === 4) {
        this.isEaten = true;
        Logger.debug(`Sajt ${this.cheeseType} teljesen elfogyott! Morzs√°k maradnak.`);
        
        // Morzs√°k norm√°l l√°that√≥s√°ggal maradnak
      }
    } else {
      // Ha m√°r az 5. frame-n√©l vagyunk, nem t√∂rt√©nik semmi
      Logger.debug(`Sajt ${this.cheeseType} m√°r teljesen elfogyott - nincs t√∂bb frame!`);
    }
  }

  private updateFrame(): void {
    // SPRITESHEET setFrame haszn√°lat - pont mint a babokn√°l!
    this.setFrame(this.currentFrame);
    
    // Origin bal fels≈ë sarok
    this.setOrigin(0, 0);
    

    
    // PIXEL-PERFECT collision automatikusan friss√ºl frame v√°lt√°sn√°l!
    Logger.debug(`üßÄ Sajt ${this.cheeseType} frame v√°lt√°s: ${this.currentFrame}`);
    Logger.debug(`  poz√≠ci√≥: (${this.x}, ${this.y}) - pixel-perfect collision akt√≠v!`);
  }

  // Getterek
  public getCheeseType(): number {
    return this.cheeseType;
  }

  public getCurrentFrame(): number {
    return this.currentFrame;
  }

  public isCompletelyEaten(): boolean {
    return this.isEaten;
  }

  // Responsive scaling support
  public updateScale(scale: number): void {
    this.setScale(scale);
  }

  // Interakci√≥ √∫jra be√°ll√≠t√°sa (dev mode haszn√°lja)
  public resetInteraction(): void {
    this.setupInteraction();
  }

  /**
   * M√©retezett cursor be√°ll√≠t√°sa - 20%-kal kisebb eg√©rke sz√°j
   */
  private setScaledCursor(canvas: HTMLCanvasElement, cursorFileName: string, scale: number): void {
    // Dinamikus canvas cursor k√©sz√≠t√©se a megadott m√©rettel
    const img = new Image();
    img.onload = () => {
      const tempCanvas = document.createElement('canvas');
      const ctx = tempCanvas.getContext('2d');
      
      if (ctx) {
        // Canvas m√©ret be√°ll√≠t√°sa a scale-elt m√©retre
        const scaledWidth = img.width * scale;
        const scaledHeight = img.height * scale;
        tempCanvas.width = scaledWidth;
        tempCanvas.height = scaledHeight;
        
        // K√©p rajzol√°sa scale-elt m√©retben
        ctx.drawImage(img, 0, 0, scaledWidth, scaledHeight);
        
        // Cursor be√°ll√≠t√°sa a scale-elt k√©ppel - hotspot k√∂z√©pen
        const hotspotX = scaledWidth / 2;  // K√∂z√©ppont X
        const hotspotY = scaledHeight / 2; // K√∂z√©ppont Y
        canvas.style.cursor = `url(${tempCanvas.toDataURL()}) ${hotspotX} ${hotspotY}, auto`;
        
        Logger.debug(`üñ±Ô∏è Eg√©rke sz√°j cursor m√©retezve ${(scale * 100).toFixed(1)}%-ra: ${scaledWidth}x${scaledHeight}px`);
      }
    };
    
    img.src = `./minigame/images/${cursorFileName}`;
  }

}