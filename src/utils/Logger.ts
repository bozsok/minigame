/**
 * Logger - K√∂zpontos√≠tott logging rendszer
 * Lehet≈ëv√© teszi a debug logok kikapcsol√°s√°t production k√∂rnyezetben
 */

export enum LogLevel {
  DEBUG = 0,
  INFO = 1,
  WARN = 2,
  ERROR = 3,
  NONE = 4
}

export class Logger {
  private static currentLevel: LogLevel = this.getLogLevelFromEnvironment();
  
  /**
   * Log szint be√°ll√≠t√°sa k√∂rnyezet alapj√°n
   */
  private static getLogLevelFromEnvironment(): LogLevel {
    // Development m√≥dban minden log l√°tszik, production-ben csak ERROR
    if (process.env.NODE_ENV === 'production') {
      return LogLevel.ERROR;
    }
    
    // Alap√©rtelmezetten INFO szint (DEBUG kikapcsolva)
    return LogLevel.INFO;
  }
  
  /**
   * Log szint manu√°lis be√°ll√≠t√°sa
   */
  public static setLogLevel(level: LogLevel): void {
    this.currentLevel = level;
  }
  
  /**
   * Debug √ºzenet - csak development m√≥dban l√°tszik
   */
  public static debug(message: string, ...args: any[]): void {
    if (this.currentLevel <= LogLevel.DEBUG) {
      console.log(`üîç DEBUG: ${message}`, ...args);
    }
  }
  
  /**
   * Info √ºzenet - development √©s production m√≥dban is l√°tszik
   */
  public static info(message: string, ...args: any[]): void {
    if (this.currentLevel <= LogLevel.INFO) {
      console.log(`‚ÑπÔ∏è INFO: ${message}`, ...args);
    }
  }
  
  /**
   * Figyelmeztet√©s - mindig l√°tszik
   */
  public static warn(message: string, ...args: any[]): void {
    if (this.currentLevel <= LogLevel.WARN) {
      console.warn(`‚ö†Ô∏è WARN: ${message}`, ...args);
    }
  }
  
  /**
   * Hiba - mindig l√°tszik
   */
  public static error(message: string, ...args: any[]): void {
    if (this.currentLevel <= LogLevel.ERROR) {
      console.error(`üö® ERROR: ${message}`, ...args);
    }
  }
  
  /**
   * Id≈ëz√≠t≈ë - csak development m√≥dban m≈±k√∂dik
   */
  public static timer(label: string): void {
    if (this.currentLevel <= LogLevel.DEBUG) {
      console.time(label);
    }
  }
  
  /**
   * Id≈ëz√≠t≈ë le√°ll√≠t√°sa - csak development m√≥dban m≈±k√∂dik
   */
  public static timerEnd(label: string): void {
    if (this.currentLevel <= LogLevel.DEBUG) {
      console.timeEnd(label);
    }
  }
  
  /**
   * Csoport kezdete - csak development m√≥dban m≈±k√∂dik
   */
  public static group(label: string): void {
    if (this.currentLevel <= LogLevel.DEBUG) {
      console.group(label);
    }
  }
  
  /**
   * Csoport v√©ge - csak development m√≥dban m≈±k√∂dik
   */
  public static groupEnd(): void {
    if (this.currentLevel <= LogLevel.DEBUG) {
      console.groupEnd();
    }
  }
}