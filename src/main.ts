import * as Phaser from 'phaser';
import { GameConfig, initializeZoomAwareGame } from './config/GameConfig';
import BootScene from './scenes/BootScene';
import PreloadScene from './scenes/PreloadScene';
import MenuScene from './scenes/MenuScene';
import GameScene from './scenes/GameScene';
import { Logger } from './utils/Logger';
import { UIConstants } from './config/UIConstants';

const config: Phaser.Types.Core.GameConfig = {
  ...GameConfig,
  scene: [BootScene, PreloadScene, MenuScene, GameScene],
};

const game = new Phaser.Game(config);

// üîç Zoom-aware rendszer inicializ√°l√°sa
initializeZoomAwareGame(game);

Logger.info('Phaser j√°t√©k elind√≠tva zoom-aware t√°mogat√°ssal!');

// Glob√°lis API a k√ºls≈ë HTML gomboknak
(window as any).EgerKalandAPI = {
  startGame: async () => {
    Logger.info('=== K√úLS≈ê PLAY GOMB API H√çV√ÅS ===');
    
    try {
      // 1. √Åtv√°lt√°s GameScene-re
      const menuScene = game.scene.getScene('MenuScene') as MenuScene;
      if (menuScene) {
        Logger.debug('MenuScene ‚Üí GameScene √°tv√°lt√°s...');
        menuScene.scene.start('GameScene');
        
        // 2. GameScene startGame() met√≥dus√°nak megh√≠v√°sa
        setTimeout(() => {
          const gameScene = game.scene.getScene('GameScene') as GameScene;
          if (gameScene && gameScene.startGame) {
            Logger.debug('GameScene startGame() megh√≠v√°sa...');
            gameScene.startGame();
          }
        }, UIConstants.timings.sceneTransitionDelay);
      }
      
      // 2. Kis k√©sleltet√©s majd teljesk√©perny≈ës m√≥d
      setTimeout(async () => {
        Logger.info('Automatikus teljesk√©perny≈ës ind√≠t√°s...');
        
        // Teljesk√©perny≈ës m√≥d aktiv√°l√°sa
        const gameContainer = document.getElementById('game-container');
        const element = gameContainer || document.documentElement;

        if (element.requestFullscreen) {
          await element.requestFullscreen();
        } else if ((element as any).webkitRequestFullscreen) {
          await (element as any).webkitRequestFullscreen();
        } else if ((element as any).mozRequestFullScreen) {
          await (element as any).mozRequestFullScreen();
        } else if ((element as any).msRequestFullscreen) {
          await (element as any).msRequestFullscreen();
        }
        
        Logger.info('Teljesk√©perny≈ës m√≥d aktiv√°lva - j√°t√©k kezd≈ëdhet!');
      }, UIConstants.timings.fullscreenDelay);
      
    } catch (error) {
      Logger.error('J√°t√©k ind√≠t√°s hiba:', error);
    }
  }
};

Logger.info('EgerKalandAPI el√©rhet≈ë a window.EgerKalandAPI-n kereszt√ºl');